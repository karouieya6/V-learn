import { defaultPlaceholderChar } from './constants';
export const err = 'text-mask: convertMaskToPlaceholder; The mask property must be an array.';
export function convertMaskToPlaceholder(mask, placeholderChar = defaultPlaceholderChar) {
    if (!isArray(mask)) {
        throw new Error(err);
    }
    if (mask.indexOf(placeholderChar) !== -1) {
        throw new Error('Placeholder character must not be used as part of the mask. Please specify a character ' +
            'that is not present in your mask as your placeholder character.\n\n' +
            `The placeholder character that was received is: ${JSON.stringify(placeholderChar)}\n\n` +
            `The mask that was received is: ${JSON.stringify(mask)}`);
    }
    return mask.map((char) => {
        return (char instanceof RegExp) ? placeholderChar : char;
    }).join('');
}
export function isMaskCreator(value) {
    return typeof value === 'function';
}
export function isMaskObject(value) {
    return typeof value === 'object' && value.pipe !== undefined && value.mask !== undefined;
}
export function isArray(value) {
    return (Array.isArray && Array.isArray(value)) || value instanceof Array;
}
export function isString(value) {
    return typeof value === 'string' || value instanceof String;
}
export function isNumber(value) {
    return typeof value === 'number' && !isNaN(value);
}
export function isNil(value) {
    return typeof value === 'undefined' || value === null;
}
export function processCaretTraps(mask) {
    const caretTrapIndexes = [];
    let indexOfCaretTrap = mask?.indexOf('[]');
    while (mask && indexOfCaretTrap !== -1) {
        caretTrapIndexes.push(indexOfCaretTrap);
        mask.splice(indexOfCaretTrap, 1);
        indexOfCaretTrap = mask.indexOf('[]');
    }
    return caretTrapIndexes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0aWVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2xpYi9jb3JlL3V0aWxpdGllcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsc0JBQXNCLEVBQUUsTUFBTSxhQUFhLENBQUM7QUFHckQsTUFBTSxDQUFDLE1BQU0sR0FBRyxHQUFHLDBFQUEwRSxDQUFDO0FBRTlGLE1BQU0sVUFBVSx3QkFBd0IsQ0FDdEMsSUFBVSxFQUNWLGVBQWUsR0FBRyxzQkFBc0I7SUFFeEMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDO1FBQ25CLE1BQU0sSUFBSSxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkIsQ0FBQztJQUVELElBQUksSUFBSSxDQUFDLE9BQU8sQ0FBQyxlQUFlLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRSxDQUFDO1FBQ3pDLE1BQU0sSUFBSSxLQUFLLENBQ2IseUZBQXlGO1lBQ3pGLHFFQUFxRTtZQUNyRSxtREFBbUQsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUMsTUFBTTtZQUN4RixrQ0FBa0MsSUFBSSxDQUFDLFNBQVMsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUN6RCxDQUFDO0lBQ0osQ0FBQztJQUVELE9BQU8sSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxFQUFFO1FBQ3ZCLE9BQU8sQ0FBQyxJQUFJLFlBQVksTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLGVBQWUsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDO0lBQzNELENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQztBQUNkLENBQUM7QUFFRCxNQUFNLFVBQVUsYUFBYSxDQUFDLEtBQVU7SUFDdEMsT0FBTyxPQUFPLEtBQUssS0FBSyxVQUFVLENBQUM7QUFDckMsQ0FBQztBQUVELE1BQU0sVUFBVSxZQUFZLENBQUMsS0FBVTtJQUNyQyxPQUFPLE9BQU8sS0FBSyxLQUFLLFFBQVEsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsSUFBSSxLQUFLLENBQUMsSUFBSSxLQUFLLFNBQVMsQ0FBQztBQUMzRixDQUFDO0FBRUQsTUFBTSxVQUFVLE9BQU8sQ0FBSSxLQUFVO0lBQ25DLE9BQU8sQ0FBQyxLQUFLLENBQUMsT0FBTyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsSUFBSSxLQUFLLFlBQVksS0FBSyxDQUFDO0FBQzNFLENBQUM7QUFFRCxNQUFNLFVBQVUsUUFBUSxDQUFDLEtBQVU7SUFDakMsT0FBTyxPQUFPLEtBQUssS0FBSyxRQUFRLElBQUksS0FBSyxZQUFZLE1BQU0sQ0FBQztBQUM5RCxDQUFDO0FBRUQsTUFBTSxVQUFVLFFBQVEsQ0FBQyxLQUFVO0lBQ2pDLE9BQU8sT0FBTyxLQUFLLEtBQUssUUFBUSxJQUFJLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQ3BELENBQUM7QUFFRCxNQUFNLFVBQVUsS0FBSyxDQUFDLEtBQVU7SUFDOUIsT0FBTyxPQUFPLEtBQUssS0FBSyxXQUFXLElBQUksS0FBSyxLQUFLLElBQUksQ0FBQztBQUN4RCxDQUFDO0FBRUQsTUFBTSxVQUFVLGlCQUFpQixDQUFDLElBQVU7SUFDMUMsTUFBTSxnQkFBZ0IsR0FBYSxFQUFFLENBQUM7SUFDdEMsSUFBSSxnQkFBZ0IsR0FBVyxJQUFJLEVBQUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBRW5ELE9BQU8sSUFBSSxJQUFJLGdCQUFnQixLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUM7UUFDdkMsZ0JBQWdCLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7UUFDeEMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRSxDQUFDLENBQUMsQ0FBQztRQUNqQyxnQkFBZ0IsR0FBRyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQ3hDLENBQUM7SUFFRCxPQUFPLGdCQUFnQixDQUFDO0FBQzFCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBkZWZhdWx0UGxhY2Vob2xkZXJDaGFyIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTWFzaywgTWFza0NyZWF0b3IsIE1hc2tPYmplY3QgfSBmcm9tICcuL3R5cGluZ3MnO1xuXG5leHBvcnQgY29uc3QgZXJyID0gJ3RleHQtbWFzazogY29udmVydE1hc2tUb1BsYWNlaG9sZGVyOyBUaGUgbWFzayBwcm9wZXJ0eSBtdXN0IGJlIGFuIGFycmF5Lic7XG5cbmV4cG9ydCBmdW5jdGlvbiBjb252ZXJ0TWFza1RvUGxhY2Vob2xkZXIoXG4gIG1hc2s6IE1hc2ssXG4gIHBsYWNlaG9sZGVyQ2hhciA9IGRlZmF1bHRQbGFjZWhvbGRlckNoYXJcbik6IHN0cmluZyB7XG4gIGlmICghaXNBcnJheShtYXNrKSkge1xuICAgIHRocm93IG5ldyBFcnJvcihlcnIpO1xuICB9XG5cbiAgaWYgKG1hc2suaW5kZXhPZihwbGFjZWhvbGRlckNoYXIpICE9PSAtMSkge1xuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICdQbGFjZWhvbGRlciBjaGFyYWN0ZXIgbXVzdCBub3QgYmUgdXNlZCBhcyBwYXJ0IG9mIHRoZSBtYXNrLiBQbGVhc2Ugc3BlY2lmeSBhIGNoYXJhY3RlciAnICtcbiAgICAgICd0aGF0IGlzIG5vdCBwcmVzZW50IGluIHlvdXIgbWFzayBhcyB5b3VyIHBsYWNlaG9sZGVyIGNoYXJhY3Rlci5cXG5cXG4nICtcbiAgICAgIGBUaGUgcGxhY2Vob2xkZXIgY2hhcmFjdGVyIHRoYXQgd2FzIHJlY2VpdmVkIGlzOiAke0pTT04uc3RyaW5naWZ5KHBsYWNlaG9sZGVyQ2hhcil9XFxuXFxuYCArXG4gICAgICBgVGhlIG1hc2sgdGhhdCB3YXMgcmVjZWl2ZWQgaXM6ICR7SlNPTi5zdHJpbmdpZnkobWFzayl9YFxuICAgICk7XG4gIH1cblxuICByZXR1cm4gbWFzay5tYXAoKGNoYXIpID0+IHtcbiAgICByZXR1cm4gKGNoYXIgaW5zdGFuY2VvZiBSZWdFeHApID8gcGxhY2Vob2xkZXJDaGFyIDogY2hhcjtcbiAgfSkuam9pbignJyk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hc2tDcmVhdG9yKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBNYXNrQ3JlYXRvciB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdmdW5jdGlvbic7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc01hc2tPYmplY3QodmFsdWU6IGFueSk6IHZhbHVlIGlzIE1hc2tPYmplY3Qge1xuICByZXR1cm4gdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZS5waXBlICE9PSB1bmRlZmluZWQgJiYgdmFsdWUubWFzayAhPT0gdW5kZWZpbmVkO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gaXNBcnJheTxUPih2YWx1ZTogYW55KTogdmFsdWUgaXMgQXJyYXk8VD4ge1xuICByZXR1cm4gKEFycmF5LmlzQXJyYXkgJiYgQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHx8IHZhbHVlIGluc3RhbmNlb2YgQXJyYXk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1N0cmluZyh2YWx1ZTogYW55KTogdmFsdWUgaXMgc3RyaW5nIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycgfHwgdmFsdWUgaW5zdGFuY2VvZiBTdHJpbmc7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBpc051bWJlcih2YWx1ZTogYW55KTogdmFsdWUgaXMgbnVtYmVyIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKHZhbHVlKTtcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIGlzTmlsKHZhbHVlOiBhbnkpOiB2YWx1ZSBpcyBudWxsIHtcbiAgcmV0dXJuIHR5cGVvZiB2YWx1ZSA9PT0gJ3VuZGVmaW5lZCcgfHwgdmFsdWUgPT09IG51bGw7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBwcm9jZXNzQ2FyZXRUcmFwcyhtYXNrOiBNYXNrKTogbnVtYmVyW10ge1xuICBjb25zdCBjYXJldFRyYXBJbmRleGVzOiBudW1iZXJbXSA9IFtdO1xuICBsZXQgaW5kZXhPZkNhcmV0VHJhcDogbnVtYmVyID0gbWFzaz8uaW5kZXhPZignW10nKTtcblxuICB3aGlsZSAobWFzayAmJiBpbmRleE9mQ2FyZXRUcmFwICE9PSAtMSkge1xuICAgIGNhcmV0VHJhcEluZGV4ZXMucHVzaChpbmRleE9mQ2FyZXRUcmFwKTtcbiAgICBtYXNrLnNwbGljZShpbmRleE9mQ2FyZXRUcmFwLCAxKTtcbiAgICBpbmRleE9mQ2FyZXRUcmFwID0gbWFzay5pbmRleE9mKCdbXScpO1xuICB9XG5cbiAgcmV0dXJuIGNhcmV0VHJhcEluZGV4ZXM7XG59XG4iXX0=