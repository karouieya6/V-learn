import { ElementRef, OnChanges, Provider, Renderer2 } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TextMaskConfig } from './core';
import * as i0 from "@angular/core";
export declare const MASKEDINPUT_VALUE_ACCESSOR: Provider;
export declare class MaskedInputDirective implements ControlValueAccessor, OnChanges {
    private renderer;
    private elementRef;
    private compositionMode;
    textMaskConfig: TextMaskConfig;
    private textMaskInputElement;
    private inputElement;
    /** Whether the user is creating a composition string (IME events). */
    private composing;
    onChange: (_: any) => void;
    onTouched: () => void;
    constructor(renderer: Renderer2, elementRef: ElementRef, compositionMode: boolean);
    ngOnChanges(): void;
    writeValue(value: any): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    setDisabledState(isDisabled: boolean): void;
    _handleInput(value: string): void;
    _setupMask(create?: boolean): void;
    _compositionStart(): void;
    _compositionEnd(value: any): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<MaskedInputDirective, [null, null, { optional: true; }]>;
    static ɵdir: i0.ɵɵDirectiveDeclaration<MaskedInputDirective, "[textMask]", ["textMask"], { "textMaskConfig": { "alias": "textMask"; "required": false; }; }, {}, never, never, false, never>;
}
export declare class TextMaskModule {
    static ɵfac: i0.ɵɵFactoryDeclaration<TextMaskModule, never>;
    static ɵmod: i0.ɵɵNgModuleDeclaration<TextMaskModule, [typeof MaskedInputDirective], never, [typeof MaskedInputDirective]>;
    static ɵinj: i0.ɵɵInjectorDeclaration<TextMaskModule>;
}
