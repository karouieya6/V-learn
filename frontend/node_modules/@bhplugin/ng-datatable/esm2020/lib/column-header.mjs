import { Component, Input, Output, EventEmitter, ViewChild } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/common";
import * as i2 from "@angular/forms";
import * as i3 from "./column-filter";
import * as i4 from "./icon-check";
import * as i5 from "./icon-dash";
import * as i6 from "./icon-filter";
export class ColumnHeaderComponent {
    constructor(viewContainerRef) {
        this.viewContainerRef = viewContainerRef;
        this.selectAll = new EventEmitter();
        this.sortChange = new EventEmitter();
        this.filterChange = new EventEmitter();
        this.isOpenFilter = null;
    }
    ngOnInit() {
        this.viewContainerRef.createEmbeddedView(this.template);
        this.checkboxChange();
    }
    checkboxChange() {
        if (this.selectedAll) {
            this.selectedAll.nativeElement.indeterminate = this.checkAll !== 0 ? !this.checkAll : false;
            this.selectedAll.nativeElement.checked = this.checkAll;
        }
    }
    toggleFilterMenu(col) {
        if (col) {
            if (this.isOpenFilter === col.field) {
                this.isOpenFilter = null;
            }
            else {
                this.isOpenFilter = col.field;
            }
        }
        else {
            this.isOpenFilter = null;
        }
    }
}
ColumnHeaderComponent.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ColumnHeaderComponent, deps: [{ token: i0.ViewContainerRef }], target: i0.ɵɵFactoryTarget.Component });
ColumnHeaderComponent.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "14.0.0", version: "15.2.9", type: ColumnHeaderComponent, selector: "column-header", inputs: { all: "all", isFooter: "isFooter", checkAll: "checkAll" }, outputs: { selectAll: "selectAll", sortChange: "sortChange", filterChange: "filterChange" }, viewQueries: [{ propertyName: "template", first: true, predicate: ["template"], descendants: true, static: true }, { propertyName: "selectedAll", first: true, predicate: ["selectedAll"], descendants: true }], ngImport: i0, template: `
        <ng-template #template>
            <tr>
                <th
                    *ngIf="all.hasCheckbox"
                    [class]="'bh-w-px'"
                    [ngClass]="{
                        'bh-sticky bh-bg-blue-light bh-z-[1]': all.stickyHeader || all.stickyFirstColumn,
                        'bh-top-0': all.stickyHeader,
                        'bh-left-0': all.stickyFirstColumn
                    }"
                >
                    <div class="bh-checkbox">
                        <input #selectedAll type="checkbox" (click)="selectAll.emit(selectedAll.checked); $event.stopPropagation()" />
                        <div>
                            <icon-check class="check"></icon-check>
                            <icon-dash class="intermediate"></icon-dash>
                        </div>
                    </div>
                </th>

                <ng-container *ngFor="let col of all.columns; let j = index">
                    <th
                        *ngIf="!col.hide"
                        [class]="'bh-select-none bh-z-[1]'"
                        [ngClass]="[
                            all.sortable && col.sort ? 'bh-cursor-pointer' : '',
                            j === 0 && all.stickyFirstColumn ? 'bh-sticky bh-left-0 bh-bg-blue-light' : '',
                            all.hasCheckbox && j === 0 && all.stickyFirstColumn ? 'bh-left-[52px]' : ''
                        ]"
                        [style]="{ width: col.width, 'min-width': col.minWidth, 'max-width': col.maxWidth }"
                    >
                        <div class="bh-flex bh-items-center" [ngClass]="[col.headerClass ? col.headerClass : '']" (click)="all.sortable && col.sort && sortChange.emit(col.field)">
                            {{ col.title }}
                            <span *ngIf="all.sortable && col.sort" class="bh-ml-3 bh-sort bh-flex bh-items-center" [ngClass]="[all.sortColumn, all.sortDirection]">
                                <svg width="16" height="16" viewBox="0 0 14 14" fill="none">
                                    <polygon
                                        points="3.11,6.25 10.89,6.25 7,1.75"
                                        fill="currentColor"
                                        class="bh-text-black/20"
                                        [ngClass]="[all.sortColumn === col.field && all.sortDirection === 'asc' ? '!bh-text-primary' : '']"
                                    ></polygon>
                                    <polygon
                                        points="7,12.25 10.89,7.75 3.11,7.75"
                                        fill="currentColor"
                                        class="bh-text-black/20"
                                        [ngClass]="[all.sortColumn === col.field && all.sortDirection === 'desc' ? '!bh-text-primary' : '']"
                                    ></polygon>
                                </svg>
                            </span>
                        </div>

                        <ng-container *ngIf="all.columnFilter && !isFooter">
                            <div *ngIf="col.filter" class="bh-filter bh-relative">
                                <input *ngIf="col.type === 'string'" [(ngModel)]="col.value" type="text" class="bh-form-control" (keyup)="filterChange.emit()" />
                                <input *ngIf="col.type === 'number'" [(ngModel)]="col.value" type="number" class="bh-form-control" (keyup)="filterChange.emit()" />
                                <input *ngIf="col.type === 'date'" [(ngModel)]="col.value" type="date" class="bh-form-control" (change)="filterChange.emit()" />
                                <select *ngIf="col.type === 'bool'" [(ngModel)]="col.value" class="bh-form-control" (change)="filterChange.emit()" (click)="isOpenFilter = null">
                                    <option [ngValue]="undefined">All</option>
                                    <option [ngValue]="true">True</option>
                                    <option [ngValue]="false">False</option>
                                </select>

                                <button *ngIf="col.type !== 'bool'" type="button" (click)="toggleFilterMenu(col); $event.stopPropagation()">
                                    <icon-filter class="bh-w-4"></icon-filter>
                                </button>

                                <column-filter
                                    [ngClass]="{ 'bh-hidden': isOpenFilter !== col.field }"
                                    [column]="col"
                                    (close)="toggleFilterMenu()"
                                    (filterChange)="filterChange.emit()"
                                ></column-filter>
                            </div>
                        </ng-container>
                    </th>
                </ng-container>
            </tr>
        </ng-template>
    `, isInline: true, dependencies: [{ kind: "directive", type: i1.NgClass, selector: "[ngClass]", inputs: ["class", "ngClass"] }, { kind: "directive", type: i1.NgForOf, selector: "[ngFor][ngForOf]", inputs: ["ngForOf", "ngForTrackBy", "ngForTemplate"] }, { kind: "directive", type: i1.NgIf, selector: "[ngIf]", inputs: ["ngIf", "ngIfThen", "ngIfElse"] }, { kind: "directive", type: i2.NgSelectOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.ɵNgSelectMultipleOption, selector: "option", inputs: ["ngValue", "value"] }, { kind: "directive", type: i2.DefaultValueAccessor, selector: "input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]" }, { kind: "directive", type: i2.NumberValueAccessor, selector: "input[type=number][formControlName],input[type=number][formControl],input[type=number][ngModel]" }, { kind: "directive", type: i2.SelectControlValueAccessor, selector: "select:not([multiple])[formControlName],select:not([multiple])[formControl],select:not([multiple])[ngModel]", inputs: ["compareWith"] }, { kind: "directive", type: i2.NgControlStatus, selector: "[formControlName],[ngModel],[formControl]" }, { kind: "directive", type: i2.NgModel, selector: "[ngModel]:not([formControlName]):not([formControl])", inputs: ["name", "disabled", "ngModel", "ngModelOptions"], outputs: ["ngModelChange"], exportAs: ["ngModel"] }, { kind: "component", type: i3.ColumnFilterComponent, selector: "column-filter", inputs: ["column"], outputs: ["close", "filterChange"] }, { kind: "component", type: i4.IconCheckComponent, selector: "icon-check", inputs: ["class"] }, { kind: "component", type: i5.IconDashComponent, selector: "icon-dash", inputs: ["class"] }, { kind: "component", type: i6.IconFilterComponent, selector: "icon-filter", inputs: ["class"] }] });
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "15.2.9", ngImport: i0, type: ColumnHeaderComponent, decorators: [{
            type: Component,
            args: [{
                    selector: 'column-header',
                    template: `
        <ng-template #template>
            <tr>
                <th
                    *ngIf="all.hasCheckbox"
                    [class]="'bh-w-px'"
                    [ngClass]="{
                        'bh-sticky bh-bg-blue-light bh-z-[1]': all.stickyHeader || all.stickyFirstColumn,
                        'bh-top-0': all.stickyHeader,
                        'bh-left-0': all.stickyFirstColumn
                    }"
                >
                    <div class="bh-checkbox">
                        <input #selectedAll type="checkbox" (click)="selectAll.emit(selectedAll.checked); $event.stopPropagation()" />
                        <div>
                            <icon-check class="check"></icon-check>
                            <icon-dash class="intermediate"></icon-dash>
                        </div>
                    </div>
                </th>

                <ng-container *ngFor="let col of all.columns; let j = index">
                    <th
                        *ngIf="!col.hide"
                        [class]="'bh-select-none bh-z-[1]'"
                        [ngClass]="[
                            all.sortable && col.sort ? 'bh-cursor-pointer' : '',
                            j === 0 && all.stickyFirstColumn ? 'bh-sticky bh-left-0 bh-bg-blue-light' : '',
                            all.hasCheckbox && j === 0 && all.stickyFirstColumn ? 'bh-left-[52px]' : ''
                        ]"
                        [style]="{ width: col.width, 'min-width': col.minWidth, 'max-width': col.maxWidth }"
                    >
                        <div class="bh-flex bh-items-center" [ngClass]="[col.headerClass ? col.headerClass : '']" (click)="all.sortable && col.sort && sortChange.emit(col.field)">
                            {{ col.title }}
                            <span *ngIf="all.sortable && col.sort" class="bh-ml-3 bh-sort bh-flex bh-items-center" [ngClass]="[all.sortColumn, all.sortDirection]">
                                <svg width="16" height="16" viewBox="0 0 14 14" fill="none">
                                    <polygon
                                        points="3.11,6.25 10.89,6.25 7,1.75"
                                        fill="currentColor"
                                        class="bh-text-black/20"
                                        [ngClass]="[all.sortColumn === col.field && all.sortDirection === 'asc' ? '!bh-text-primary' : '']"
                                    ></polygon>
                                    <polygon
                                        points="7,12.25 10.89,7.75 3.11,7.75"
                                        fill="currentColor"
                                        class="bh-text-black/20"
                                        [ngClass]="[all.sortColumn === col.field && all.sortDirection === 'desc' ? '!bh-text-primary' : '']"
                                    ></polygon>
                                </svg>
                            </span>
                        </div>

                        <ng-container *ngIf="all.columnFilter && !isFooter">
                            <div *ngIf="col.filter" class="bh-filter bh-relative">
                                <input *ngIf="col.type === 'string'" [(ngModel)]="col.value" type="text" class="bh-form-control" (keyup)="filterChange.emit()" />
                                <input *ngIf="col.type === 'number'" [(ngModel)]="col.value" type="number" class="bh-form-control" (keyup)="filterChange.emit()" />
                                <input *ngIf="col.type === 'date'" [(ngModel)]="col.value" type="date" class="bh-form-control" (change)="filterChange.emit()" />
                                <select *ngIf="col.type === 'bool'" [(ngModel)]="col.value" class="bh-form-control" (change)="filterChange.emit()" (click)="isOpenFilter = null">
                                    <option [ngValue]="undefined">All</option>
                                    <option [ngValue]="true">True</option>
                                    <option [ngValue]="false">False</option>
                                </select>

                                <button *ngIf="col.type !== 'bool'" type="button" (click)="toggleFilterMenu(col); $event.stopPropagation()">
                                    <icon-filter class="bh-w-4"></icon-filter>
                                </button>

                                <column-filter
                                    [ngClass]="{ 'bh-hidden': isOpenFilter !== col.field }"
                                    [column]="col"
                                    (close)="toggleFilterMenu()"
                                    (filterChange)="filterChange.emit()"
                                ></column-filter>
                            </div>
                        </ng-container>
                    </th>
                </ng-container>
            </tr>
        </ng-template>
    `,
                }]
        }], ctorParameters: function () { return [{ type: i0.ViewContainerRef }]; }, propDecorators: { template: [{
                type: ViewChild,
                args: ['template', { static: true }]
            }], selectedAll: [{
                type: ViewChild,
                args: ['selectedAll']
            }], all: [{
                type: Input
            }], isFooter: [{
                type: Input
            }], checkAll: [{
                type: Input
            }], selectAll: [{
                type: Output,
                args: ['selectAll']
            }], sortChange: [{
                type: Output,
                args: ['sortChange']
            }], filterChange: [{
                type: Output,
                args: ['filterChange']
            }] } });
//# sourceMappingURL=data:application/json;base64,